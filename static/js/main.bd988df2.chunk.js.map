{"version":3,"sources":["TicTacToe/Components/Board.js","TicTacToe/game.js","TicTacToe/Components/Game.js","App.js","index.js"],"names":["Board","props","className","squares","map","square","index","onClick","Player","hasStarted","some","winningLines","determineWinner","reduce","winner","line","first","second","third","initialSquares","Array","fill","initialCurrentPlayer","game","Game","useState","setSquares","currentPlayer","setCurrentPlayer","gameHasEnded","every","isBoardFull","newSquares","slice","player","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAmBeA,G,MAhBD,SAAAC,GACZ,OACE,qBAAKC,UAAU,QAAf,SACE,qBAAKA,UAAU,gBAAf,SACGD,EAAME,QAAQC,KAAI,SAACC,EAAQC,GAC1B,OACE,qBAAiBC,QAAS,kBAAMN,EAAMM,QAAQD,IAA9C,SACGD,GADOC,Y,OCTTE,EAAc,IAAdA,EAAsB,IAItBC,EAAa,SAAAN,GAAO,OAAIA,EAAQO,MAAK,SAAAL,GAAM,OAAI,OAASA,MAM/DM,EAAe,CACnB,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAGPC,EAAkB,SAAAT,GAAO,OAAIQ,EAAaE,QACrD,SAACC,EAAQC,GACP,GAAI,OAASD,EACX,OAAOA,EAFO,kBAKeC,EALf,GAKTC,EALS,KAKFC,EALE,KAKMC,EALN,KAOhB,OAAI,OAASf,EAAQa,IAAUb,EAAQa,KAAWb,EAAQc,IAAWd,EAAQc,KAAYd,EAAQe,GACxFf,EAAQa,GAGV,OAET,OC1BIG,EAAiB,IAAIC,MAAM,GAAGC,KAAK,MACnCC,EAAuBC,EA6CdC,EA3CF,WAAO,IAAD,EACaC,mBAASN,GADtB,mBACVhB,EADU,KACDuB,EADC,OAEyBD,mBAASH,GAFlC,mBAEVK,EAFU,KAEKC,EAFL,KAIXC,EDHgB,SAAA1B,GAAO,OAAI,OAASS,EAAgBT,IAFjC,SAAAA,GAAO,OAAIA,EAAQ2B,OAAM,SAAAzB,GAAM,OAAI,OAASA,KAEC0B,CAAY5B,GCG7DoB,CAAcpB,GAC7BW,EAASe,EAAeN,EAAqBpB,GAAW,KAmB9D,OACE,sBAAKD,UAAU,OAAf,UACE,cAAC,EAAD,CAAOC,QAASA,EAASI,QAnB7B,SAA0BD,GACxB,IAAIuB,GAAgB,OAAS1B,EAAQG,GAArC,CAIA,IAAM0B,EAAa7B,EAAQ8B,QAC3BD,EAAW1B,GAASqB,EACpBD,EAAWM,GAEXJ,EDrBsB,SAAAM,GAAM,aAAK,mBAAG1B,EAAWA,GAAd,cAAyBA,EAAWA,GAApC,GAA+C0B,GCqB/DX,CAAgBI,QAW/B,qBAAKzB,UAAU,OAAf,SACE,4BAEI2B,EACK,OAASf,EAAT,wBAAmCA,EAAnC,KAA+C,eADxC,0BAEWa,OAI7B,qBAAKzB,UAAU,WAAf,SACE,wBAAQiC,UAAWZ,EAAgBpB,GAAUI,QAlBnD,WACEmB,EAAWP,GACXS,EAAiBN,IAgBb,yBCvCOc,EAFH,kBAAM,cAAC,EAAD,KCElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bd988df2.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.css';\n\nconst Board = props => {\n  return (\n    <div className=\"Board\">\n      <div className=\"Board-squares\">\n        {props.squares.map((square, index) => {\n          return (\n            <div key={index} onClick={() => props.onClick(index)}>\n              {square}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export const Player = { O: 'O', X: 'X' };\n\nexport const opponentOf = player => ({ [Player.O]: Player.X, [Player.X]: Player.O }[player]);\n\nexport const hasStarted = squares => squares.some(square => null !== square);\n\nexport const isBoardFull = squares => squares.every(square => null !== square);\n\nexport const hasEnded = squares => null !== determineWinner(squares) || isBoardFull(squares);\n\nconst winningLines = [\n  [0, 1, 2], [3, 4, 5], [6, 7, 8], // Vertical\n  [0, 3, 6], [1, 4, 7], [2, 5, 8], // Horizontal\n  [0, 4, 8], [2, 4, 6],            // Diagonal\n];\n\nexport const determineWinner = squares => winningLines.reduce(\n  (winner, line) => {\n    if (null !== winner) {\n      return winner;\n    }\n\n    const [first, second, third] = line;\n\n    if (null !== squares[first] && squares[first] === squares[second] && squares[second] === squares[third]) {\n      return squares[first];\n    }\n\n    return null;\n  },\n  null\n);\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport * as game from '../game';\n\nconst initialSquares = new Array(9).fill(null);\nconst initialCurrentPlayer = game.Player.O;\n\nconst Game = () => {\n  const [squares, setSquares] = useState(initialSquares);\n  const [currentPlayer, setCurrentPlayer] = useState(initialCurrentPlayer);\n\n  const gameHasEnded = game.hasEnded(squares);\n  const winner = gameHasEnded ? game.determineWinner(squares) : null;\n\n  function handleBoardClick(index) {\n    if (gameHasEnded || null !== squares[index]) {\n      return;\n    }\n\n    const newSquares = squares.slice();\n    newSquares[index] = currentPlayer;\n    setSquares(newSquares);\n\n    setCurrentPlayer(game.opponentOf(currentPlayer));\n  }\n\n  function handleResetClick() {\n    setSquares(initialSquares);\n    setCurrentPlayer(initialCurrentPlayer);\n  }\n\n  return (\n    <div className=\"Game\">\n      <Board squares={squares} onClick={handleBoardClick} />\n      <div className=\"Info\">\n        <p>\n          {\n            gameHasEnded\n              ? (null !== winner ? `The winner is ${winner}!` : 'It\\'s a draw!')\n              : `Current player: ${currentPlayer}`\n          }\n        </p>\n      </div>\n      <div className=\"Controls\">\n        <button disabled={!game.hasStarted(squares)} onClick={handleResetClick}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './TicTacToe/Components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}